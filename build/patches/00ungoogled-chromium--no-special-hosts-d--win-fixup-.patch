From: Your Name <you@example.com>
Date: Thu, 13 Oct 2022 10:27:15 +0000
Subject: ungoogled-chromium: no special hosts/d (win fixup)

---
 components/domain_reliability/BUILD.gn   | 47 ++++++++++++++----------
 components/domain_reliability/monitor.cc |  8 ----
 2 files changed, 28 insertions(+), 27 deletions(-)

diff --git a/components/domain_reliability/BUILD.gn b/components/domain_reliability/BUILD.gn
--- a/components/domain_reliability/BUILD.gn
+++ b/components/domain_reliability/BUILD.gn
@@ -2,11 +2,31 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
-action("bake_in_configs") {
+action("bake_in_configs_EXCLUDED") {
   visibility = [ ":*" ]
   script = "bake_in_configs.py"
 
   inputs = [
+    "baked_in_configs/c_android_clients_google_com.json",
+    "baked_in_configs/c_bigcache_googleapis_com.json",
+    "baked_in_configs/c_doc-0-0-sj_sj_googleusercontent_com.json",
+    "baked_in_configs/c_docs_google_com.json",
+    "baked_in_configs/c_drive_google_com.json",
+    "baked_in_configs/c_googlesyndication_com.json",
+    "baked_in_configs/c_pack_google_com.json",
+    "baked_in_configs/c_play_google_com.json",
+    "baked_in_configs/c_youtube_com.json",
+    "baked_in_configs/clients2_google_com.json",
+    "baked_in_configs/docs_google_com.json",
+    "baked_in_configs/gcp_gvt2_com.json",
+    "baked_in_configs/gcp_gvt6_com.json",
+    "baked_in_configs/google-analytics_com.json",
+    "baked_in_configs/googlevideo_com.json",
+    "baked_in_configs/gvt1_com.json",
+    "baked_in_configs/gvt2_com.json",
+    "baked_in_configs/gvt6_com.json",
+    "baked_in_configs/ssl_gstatic_com.json",
+    "baked_in_configs/www_google_com.json",
   ]
 
   output_file = "$target_gen_dir/baked_in_configs.cc"
@@ -14,21 +34,13 @@ action("bake_in_configs") {
 
   # The JSON file list is too long for the command line on Windows, so put
   # them in a response file.
-  if (is_win) {
-      args = [
-        "--file-list",
-        "nul",
-        "--output",
-        rebase_path(output_file, root_build_dir),
-      ]
-  } else {
-        args = [
-        "--file-list",
-        "/dev/null",
-        "--output",
-        rebase_path(output_file, root_build_dir),
-      ]
-  }
+  response_file_contents = rebase_path(inputs, root_build_dir)
+  args = [
+    "--file-list",
+    "{{response_file_name}}",
+    "--output",
+    rebase_path(output_file, root_build_dir),
+  ]
 }
 
 component("domain_reliability") {
@@ -61,12 +73,9 @@ component("domain_reliability") {
     "util.cc",
     "util.h",
   ]
-  sources += get_target_outputs(":bake_in_configs")
-
   defines = [ "DOMAIN_RELIABILITY_IMPLEMENTATION" ]
 
   deps = [
-    ":bake_in_configs",
     "//base",
     "//net",
     "//url",
diff --git a/components/domain_reliability/monitor.cc b/components/domain_reliability/monitor.cc
--- a/components/domain_reliability/monitor.cc
+++ b/components/domain_reliability/monitor.cc
@@ -94,14 +94,6 @@ void DomainReliabilityMonitor::Shutdown() {
 }
 
 void DomainReliabilityMonitor::AddBakedInConfigs() {
-  for (size_t i = 0; kBakedInJsonConfigs[i]; ++i) {
-    base::StringPiece json(kBakedInJsonConfigs[i]);
-    std::unique_ptr<const DomainReliabilityConfig> config =
-        DomainReliabilityConfig::FromJSON(json);
-    // Guard against accidentally checking in malformed JSON configs.
-    DCHECK(config->IsValid());
-    context_manager_.AddContextForConfig(std::move(config));
-  }
 }
 
 void DomainReliabilityMonitor::SetDiscardUploads(bool discard_uploads) {
--
2.25.1
