From: Your Name <you@example.com>
Date: Fri, 1 Apr 2022 09:29:50 +0000
Subject: Addon on Multiple-fingerprinting-mitigations.patch

---
 .../renderer/core/svg/svg_graphics_element.cc   |  1 +
 .../core/svg/svg_text_content_element.cc        | 17 +++++++++++++----
 2 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/third_party/blink/renderer/core/svg/svg_graphics_element.cc b/third_party/blink/renderer/core/svg/svg_graphics_element.cc
--- a/third_party/blink/renderer/core/svg/svg_graphics_element.cc
+++ b/third_party/blink/renderer/core/svg/svg_graphics_element.cc
@@ -193,6 +193,7 @@ SVGRectTearOff* SVGGraphicsElement::getBBoxFromJavascript() {
 
     if (layout_object->IsSVGText() || layout_object->IsSVGInline())
       UseCounter::Count(GetDocument(), WebFeature::kGetBBoxForText);
+    bounding_box.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
   }
   return SVGRectTearOff::CreateDetached(bounding_box);
 }
diff --git a/third_party/blink/renderer/core/svg/svg_text_content_element.cc b/third_party/blink/renderer/core/svg/svg_text_content_element.cc
--- a/third_party/blink/renderer/core/svg/svg_text_content_element.cc
+++ b/third_party/blink/renderer/core/svg/svg_text_content_element.cc
@@ -117,11 +117,14 @@ float SVGTextContentElement::getComputedTextLength() {
   GetDocument().UpdateStyleAndLayoutForNode(this,
                                             DocumentUpdateReason::kJavaScript);
   auto* layout_object = GetLayoutObject();
+  float value = 0;
   if (IsNGTextOrInline(layout_object)) {
     NGSvgTextQuery query(*layout_object);
-    return query.SubStringLength(0, query.NumberOfCharacters());
+    value = query.SubStringLength(0, query.NumberOfCharacters());
+  } else {
+    value = SVGTextQuery(layout_object).TextLength();
   }
-  return SVGTextQuery(layout_object).TextLength();
+  return value * GetDocument().GetNoiseFactorX();
 }
 
 float SVGTextContentElement::getSubStringLength(
@@ -144,9 +147,12 @@ float SVGTextContentElement::getSubStringLength(
     nchars = number_of_chars - charnum;
 
   auto* layout_object = GetLayoutObject();
+  float value = 0;
   if (IsNGTextOrInline(layout_object))
-    return NGSvgTextQuery(*layout_object).SubStringLength(charnum, nchars);
-  return SVGTextQuery(layout_object).SubStringLength(charnum, nchars);
+    value = NGSvgTextQuery(*layout_object).SubStringLength(charnum, nchars);
+  else
+    value = SVGTextQuery(layout_object).SubStringLength(charnum, nchars);
+  return value * GetDocument().GetNoiseFactorX();
 }
 
 SVGPointTearOff* SVGTextContentElement::getStartPositionOfChar(
@@ -170,6 +176,7 @@ SVGPointTearOff* SVGTextContentElement::getStartPositionOfChar(
   } else {
     point = SVGTextQuery(layout_object).StartPositionOfCharacter(charnum);
   }
+  point.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
   return SVGPointTearOff::CreateDetached(point);
 }
 
@@ -194,6 +201,7 @@ SVGPointTearOff* SVGTextContentElement::getEndPositionOfChar(
   } else {
     point = SVGTextQuery(layout_object).EndPositionOfCharacter(charnum);
   }
+  point.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
   return SVGPointTearOff::CreateDetached(point);
 }
 
@@ -218,6 +226,7 @@ SVGRectTearOff* SVGTextContentElement::getExtentOfChar(
   } else {
     rect = SVGTextQuery(layout_object).ExtentOfCharacter(charnum);
   }
+  rect.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
   return SVGRectTearOff::CreateDetached(rect);
 }
 
--
2.25.1
